//Todo list program JML Specifiation


public enum Status { 
    pending, started, finished 
}

public class Task {
    private int id;
    private String description;
    private Status status;
    
    //@ public invariant status == Status.pending || status == Status.started || status == Status.finished;
    //@ public invariant id >= 0;
    
    //@ requires status == Status.pending || status == Status.started || status == Status.finished;
    //@ requires id >= 0;
    //@ requires description != null;
    //@ ensures status == s;
    //@ ensures id == i;
    //@ ensures description == d;
    public Task(int i, String d, Status s) {
        id = i;
        description = d;
        status = s;
    }
    
    public int getId() {
        return id;
    }
    
    public String getDescription() {
        return description;
    }
    
    public Status getStatus() {
        return status;
    }
}

public class User {
    private String name;
    private Set<Task> tasks;
    
    //@ public invariant tasks.size() == 3;
    //@ public invariant (\forall Task t1, t2; t1 != t2 && t1 in tasks && t2 in tasks; t1.getId() != t2.getId());
    
    //@ requires n != null;
    //@ ensures name == n;
    //@ ensures tasks.size() == 3;
    //@ ensures (\forall Task t1, t2; t1 != t2 && t1 in tasks && t2 in tasks; t1.getId() != t2.getId());
    public User(String n, Task t1, Task t2, Task t3) {
        name = n;
        tasks = new HashSet<Task>();
        tasks.add(t1);
        tasks.add(t2);
        tasks.add(t3);
    }
    
    public String getName() {
        return name;
    }
    
    public Set<Task> getTasks() {
        return tasks;
    }
    
    //@ requires s == Status.pending || s == Status.started || s == Status.finished;
    //@ requires t != null;
    //@ ensures tasks.contains(t);
    //@ ensures tasks.size() == \old(tasks.size()) + 1;
    public void addTask(Task t, Status s) {
        t.getStatus() = s;
        tasks.add(t);
    }
}

public class ToDoList {
    private Set<User> users;
    
    //@ public invariant (\forall User u; u in users; u.getTasks().size() == 3);
    //@ public invariant (\forall User u1, u2; u1 != u2 && u1 in users && u2 in users; (\forall Task t1; t1 in u1.getTasks(); t1 not in u2.getTasks()));
    
    //@ ensures users.size() == 0;
    public ToDoList() {
        users = new HashSet<User>();
    }
    
    public Set<User> getUsers() {
        return users;
    }
    
    //@ requires u != null;
    //@ ensures users.contains(u);
    //@ ensures users.size() == \old(users.size()) + 1;
    public void addUser(User u) {
        users.add(u);
    }
    
    //@ requires t != null;
    //@ ensures (\exists User u; u in users; t in u.getTasks());
    public void addTaskToUser(Task t) {
        for (User u : users) {
            u.addTask(t);
        }
    }
}
